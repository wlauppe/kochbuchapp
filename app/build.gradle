apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
//Firebase
apply plugin: 'com.google.gms.google-services'

//Thomas: damit das Testen klappt
apply plugin: 'kotlin-kapt'

apply plugin: 'jacoco'

android {
    testBuildType "confTest"


    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "de.psekochbuch.exzellenzkoch"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        dataBinding{
            enabled = true
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASEURL", '"http://193.196.38.185:8080/api/"'
            buildConfigField "String", "IMG_PREFIX", '"http://193.196.38.185:8080/"'
        }

        debug
                {
                    testCoverageEnabled true
                    buildConfigField "String", "BASEURL", '"http://193.196.38.185:8080/api/"'
                    buildConfigField "String", "IMG_PREFIX", '"http://193.196.38.185:8080/"'
                }
        confTest{
            initWith debug
            testCoverageEnabled true
            buildConfigField "String", "BASEURL", '"http://193.196.38.185:8081/api/"'
        }

    }


    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

     testOptions {
            unitTests.returnDefaultValues = true

     }
    testOptions.unitTests{
        includeAndroidResources = true
    }

}

dependencies {
    def room_version = "2.2.3"
    def lifecycle_version = "2.2.0"
    def livedata_version = "2.2.0-alpha02"
    def arch_version = "2.1.0"

    def version_kotlin_coroutines = "1.3.3"
    def version_moshi = "1.8.0"
    def version_retrofit = "2.7.1"
    //navgraph


    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.61"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:version_retrofit'
    implementation "com.squareup.okhttp3:logging-interceptor:3.12.2"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:3.11.0"
    implementation "com.squareup.okhttp3:okhttp:3.12.2"
    implementation "com.squareup.retrofit2:converter-moshi:$version_retrofit"
    //
    //Moshi
    implementation "com.squareup.moshi:moshi:$version_moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$version_moshi"


    //Firebase
    implementation 'com.google.firebase:firebase-auth:19.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'

    //Lifecycle & Viewmodel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    //Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //Navgraph
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.0'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.0'
    //SafeArgs
    apply plugin: "androidx.navigation.safeargs"

    //circular ImageView
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    //Glide Image Loading
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    //Espresso Intents
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test:rules:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    implementation "androidx.test.espresso:espresso-idling-resource:3.2.0"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$version_kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$version_kotlin_coroutines"
    //implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$version_retrofit_coroutines_adapter"

    //LifeData corutine scopes
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$livedata_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$livedata_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$livedata_version"

    implementation "android.arch.lifecycle:runtime:$lifecycle_version"
    implementation "android.arch.lifecycle:extensions:$lifecycle_version"
    kapt "android.arch.lifecycle:compiler:$lifecycle_version"

    //#### Lifecycle
    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

    // Annotation processor
    kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    //implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    // optional - ReactiveStreams support for LiveData
    //implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"
    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"

    ///####END Lifecycle

    //Thomas: damit das room testen klappt
    kapt "android.arch.persistence.room:compiler:2.2.3"
    //drawerlayout
    implementation "androidx.drawerlayout:drawerlayout:1.0.0"

    //Damit Coroutine Testen klapptarch_v
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.3'
    //Damit LiveData Testen klappt
    testImplementation 'android.arch.core:core-testing:1.1.1'

    //Androidx JVM Testing
//    testImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"

    //testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"

   // testImplementation "org.robolectric:robolectric:$robolectricVersion"

    //Mockito
    testImplementation "org.mockito:mockito-core:1.+"

    testImplementation 'androidx.arch.core:core-testing:2.1.0'

    //Logging von Retrofit
    //implementation 'com.squareup.okhttp3:logging-interceptor:4.3.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.2'

    //Call Adapter Factory nicht klar ob man die unbedingt braucht
    //implementation 'com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2'

    //ImagePicker
    //implementation 'com.github.esafirm.android-image-picker:imagepicker:2.2.0'

    //Testing UI Espresso
    androidTestImplementation "androidx.arch.core:core-testing:2.0.0"

    //Testou coroutine
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.2'

    debugImplementation 'com.android.support.test.espresso.idling:idling-concurrent:3.0.0'
    debugImplementation 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'


}
